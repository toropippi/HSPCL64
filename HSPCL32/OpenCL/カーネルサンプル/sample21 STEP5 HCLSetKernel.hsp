/////////////////////////////////////////////////////////////////////////////////////////////////
;HCLCallの簡易計算からHCLDoKernelへのステップアップのために作ったサンプルです。
;グラボ上でint型配列(16個)に整数12345を代入するプログラム

;流れとしては

;１グラボ上で動かすコード(カーネル)を、ファイルに出力
;２そのファイルをビルド
;３コード内の関数(カーネル)を登録
;４グラボ上にVRAM確保
;５カーネルの引数にVRAMを渡す
/////////////////////////////////////////////////////////////////////////////////////////////////




#include "hspcl32.as"
	HCLini 1
	if HCLDevCount=0:dialog "対応ビデオカードがありません。終了します",1:end

	HCLSetDev 0;0番目のデバイスを使って計算する

	sdim progrm,2048;ソースコード
	progrm={"__kernel void dainyu(__global int *vram0) {
	vram0[get_global_id(0)]=12345;
}
	"}

	bsave "clcode.cl",progrm
	wait 20
	HCLBuildProgram "clcode.cl",prgid;↑のコードのプログラムをビルド！
	HCLCreateKernel prgid,"dainyu",krnid;カーネルid作成。↑の"dainyu"関数というのが1カーネル
	HCLCreateBuffer vram,64;vramに64byte確保する。int型でいうと64/4で16配列をグラボ上に確保したことになる。この命令で確保するデータの配列の「型」は指定できない。つまりこの時点で64byte確保できたがdouble型でもint型でもfloat型で使用してもいい。型はカーネル実行時にカーネル側で指定する
	HCLSetKernel krnid,0,vram;↑の__global int *vram0・・・の「vram0」にHSPで作った「vram」を割り当てる
	//難しい言葉で言うとメモリオブジェクト(CL_mem_object id)を指定する。(HCLCallではHSPでアクセスできる「配列変数」を直接指定すればよかったが、今回は「CL_mem_object id」を指定しなければいけない、ということに注意！)
	//HCLSetKernel krnid,0,vram
	//の第二引数の0は、カーネルのほうの何番目の引数をセットシたいかを意味している
	//今回はカーネルの引数「vram0」が第一引数なので0を指定。(第n番目の引数としたらn-1を指定)
	//また今回、カーネルの引数は１こだけなので、HCLSetKernelを使うのは１回だけでよい

