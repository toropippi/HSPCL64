/////////////////////////////////////////////////////////////////////////////////////////////////
;グラボで

;C[0] =A[0] +B[0]
;C[1] =A[1] -B[1]
;C[2] =A[2] *B[2]
;C[3] =A[3] /B[3]
;C[4] =A[4] +B[4]
;C[5] =A[5] -B[5]
;C[6] =A[6] *B[6]
;C[7] =A[7] /B[7]
;C[8] =A[8] +B[8]
;C[9] =A[9] -B[9]
;C[10]=A[10]*B[10]
;C[11]=A[11]/B[11]
;C[12]=A[12]+B[12]
;C[13]=A[13]-B[13]
;C[14]=A[14]*B[14]
;C[15]=A[15]/B[15]

;をやるプログラム。AとBとCはそれぞれ16要素のfloat型配列変数
/////////////////////////////////////////////////////////////////////////////////////////////////

#include "hspcl32.as"
	HCLini 1
	fdim hsp_A,16//float型配列16こをhspで生成
	fdim hsp_B,16//float型配列16こをhspで生成
	fdim hsp_C,16//float型配列16こをhspで生成
	foreach hsp_A:hsp_A.cnt=float(rnd(100)):loop//Aにランダムを代入
	foreach hsp_B:hsp_B.cnt=float(rnd(100)):loop//Bにランダムを代入
	gosub*ソース

	//グローバルワークサイズが1であることに注意。1スレッドで4つの要素を扱っているためこれでよい
	HCLCall sosu0,1,hsp_A,hsp_B,hsp_C,NULL,NULL,NULL,NULL//ここで計算
	HCLCall sosu1,1,hsp_A,hsp_B,hsp_C,NULL,NULL,NULL,NULL//ここで計算
	HCLCall sosu2,1,hsp_A,hsp_B,hsp_C,NULL,NULL,NULL,NULL//ここで計算
	HCLCall sosu3,1,hsp_A,hsp_B,hsp_C,NULL,NULL,NULL,NULL//ここで計算




	repeat 16
		if cnt\4=0:mes ""+hsp_A.cnt+" + "+hsp_B.cnt+" = "+hsp_C.cnt
		if cnt\4=1:mes ""+hsp_A.cnt+" - "+hsp_B.cnt+" = "+hsp_C.cnt
		if cnt\4=2:mes ""+hsp_A.cnt+" * "+hsp_B.cnt+" = "+hsp_C.cnt
		if cnt\4=3:mes ""+hsp_A.cnt+" / "+hsp_B.cnt+" = "+hsp_C.cnt
	loop
	HCLbye//後片付け
	dim hsp_A,1
	dim hsp_B,1
	dim hsp_C,1
	stop















*ソース
	sosu0={"
__kernel void taskParallelAdd(__global float* A, __global float* B, __global float* C)
{
    int base = 0;
    
    C[base+0]  = A[base+0]  + B[base+0];
    C[base+4]  = A[base+4]  + B[base+4];
    C[base+8]  = A[base+8]  + B[base+8];
    C[base+12] = A[base+12] + B[base+12];
}
"}

	sosu1={"
__kernel void taskParallelSub(__global float* A, __global float* B, __global float* C)
{
    int base = 1;
    
    C[base+0]  = A[base+0]  - B[base+0];
    C[base+4]  = A[base+4]  - B[base+4];
    C[base+8]  = A[base+8]  - B[base+8];
    C[base+12] = A[base+12] - B[base+12];
}
"}

	sosu2={"
__kernel void taskParallelMul(__global float* A, __global float* B, __global float* C)
{
    int base = 2;
    
    C[base+0]  = A[base+0]  * B[base+0];
    C[base+4]  = A[base+4]  * B[base+4];
    C[base+8]  = A[base+8]  * B[base+8];
    C[base+12] = A[base+12] * B[base+12];
}
"}

	sosu3={"
__kernel void taskParallelDiv(__global float* A, __global float* B, __global float* C)
{
    int base = 3;
    
    C[base+0]  = A[base+0]  / B[base+0];
    C[base+4]  = A[base+4]  / B[base+4];
    C[base+8]  = A[base+8]  / B[base+8];
    C[base+12] = A[base+12] / B[base+12];
}
"}
	return