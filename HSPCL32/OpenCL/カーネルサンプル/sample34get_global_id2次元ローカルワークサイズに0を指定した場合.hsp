#include "hspcl32.as"
	HCLini 1
	sz=24*24
	dim global_work_size,2
	dim local_work_size,2
	global_work_size=24,24
	local_work_size=0,0
	dim hsp_array0,sz
	dim hsp_array1,sz
	dim hsp_array2,sz
	dim hsp_array3,sz
	dim hsp_array4,sz
	dim hsp_array5,sz
	sdim sosu,10000

	sosu={"
__kernel void calc(__global int *mema,__global int *memb,__global int *memc,__global int *memd,__global int *meme,__global int *memf) {
	int icx = get_global_id(0)+get_global_id(1)*24;
	mema[icx]=get_global_id(0);
	memb[icx]=get_global_id(1);
	memc[icx]=get_local_id(0);
	memd[icx]=get_local_id(1);
	meme[icx]=get_group_id(0);
	memf[icx]=get_group_id(1);
}
"}

	HCLCreateProgramWithSource sosu,strlen(sosu),prgiddmy
	HCLCreateKernel prgiddmy,"calc",krn1
	//VRAM作成
	HCLCreateBuffer vram1,sz*4
	HCLCreateBuffer vram2,sz*4
	HCLCreateBuffer vram3,sz*4
	HCLCreateBuffer vram4,sz*4
	HCLCreateBuffer vram5,sz*4
	HCLCreateBuffer vram6,sz*4
	//カーネルにVRAMセット
	HCLSetKernel krn1,0,vram1
	HCLSetKernel krn1,1,vram2
	HCLSetKernel krn1,2,vram3
	HCLSetKernel krn1,3,vram4
	HCLSetKernel krn1,4,vram5
	HCLSetKernel krn1,5,vram6
	//カーネル実行
	HCLWaitTask
	HCLDoKernel krn1,2,global_work_size,local_work_size//２次元でカーネル実行
	HCLWaitTask
	//計算後の情報をHSPの変数に読み出し
	HCLReadBuffer vram1,hsp_array0,sz*4
	HCLReadBuffer vram2,hsp_array1,sz*4
	HCLReadBuffer vram3,hsp_array2,sz*4
	HCLReadBuffer vram4,hsp_array3,sz*4
	HCLReadBuffer vram5,hsp_array4,sz*4
	HCLReadBuffer vram6,hsp_array5,sz*4
	HCLWaitTask



	sdim mojiretu,1000000
	mojiretu="get_global_id(0,1)	"+"get_local_id(0,1)	"+"get_group_id(0,1)	"
	mojiretu+="\n"
	repeat sz
		mojiretu+="("+str(hsp_array0.cnt)+","
		mojiretu+=str(hsp_array1.cnt)+")		"
		mojiretu+="("+str(hsp_array2.cnt)+","
		mojiretu+=str(hsp_array3.cnt)+")		"
		mojiretu+="("+str(hsp_array4.cnt)+","
		mojiretu+=str(hsp_array5.cnt)+")		"
		mojiretu+="\n"
	loop
	
	screen 0,1000,540
	mesbox mojiretu,992,532,4