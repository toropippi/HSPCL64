//オンボードだと上手く動かないかもしれません
//レンダリング可能バッファに立方体と罫線をレンダリングして、それを1枚のポリゴンに貼り付けてくるくる回すサンプル
//レンダリング可能バッファのサイズは1280*960
//一方最終出力の画面は640*480。
//なのでglViewport の使い方にも注目
#include "hspcl32.as"
	screen 0,640,480
	HCLini
	HGLSetView

	gosub*頂点設定
	gosub*ライト設定
	ang=0.0
	gosub*CreateFBO

		repeat -1
	    gosub*RenderSceneWithFBO
	    gosub*RenderImage
		SwapBuffers wglGetCurrentDC()
	    await 16
	    getkey key,27:if key:gosub*DeleteFBO:break
	    loop
	HCLbye
	end

*CreateFBO
	HGLCreateTexture3 fbotex,fboclid,fboid,fborboid,1280,960,GL_RGBA, GL_UNSIGNED_BYTE
	return

*DeleteFBO
	HGLReleaseTexture3 fbotex,fboid,fborboid
	return

*RenderSceneWithFBO//レンダリング可能バッファにレンダリング
    glBindFramebuffer GL_FRAMEBUFFER, fboid
    gosub*RenderScene
    glBindFramebuffer GL_FRAMEBUFFER, 0
	return

*RenderImage
	glViewport 0,0,640,480
    glClearColor 0.9, 0.9, 0.1, 1.0
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
    // 図形の描画
    glPushMatrix
	gluLookAt 0.001,0.001,1.1,0.0,0.0,0.0,0.0,1.0,0.0
	glLightfv GL_LIGHT0,GL_POSITION,varptr(light_pos)//この位置に必要。この場合下の1枚ポリゴンに法線は設定してないのでライトの意味はあまりない・・

    glBindTexture GL_TEXTURE_2D, fbotex

	glBegin GL_QUADS
	glTexCoord2d 0.0, 1.0:
	glVertex3d -0.9*sin(0.2*ang), -0.9,-0.5+0.5*cos(0.2*ang)
	glTexCoord2d 1.0, 1.0:
	glVertex3d 0.9*sin(0.2*ang), -0.9,-0.5-0.5*cos(0.2*ang)
	glTexCoord2d 1.0, 0.0:
	glVertex3d 0.9*sin(0.2*ang),  0.9,-0.5-0.5*cos(0.2*ang)
	glTexCoord2d 0.0, 0.0:
	glVertex3d -0.9*sin(0.2*ang),  0.9,-0.5+0.5*cos(0.2*ang)
	glEnd

    glPopMatrix
	glFinish

    glBindTexture GL_TEXTURE_2D, 0
	return

*RenderScene
	glViewport 0,0,1280,960
    glClearColor 0.0, 0.5, 1.0, 1.0
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    // 図形の描画
    glPushMatrix
	gluLookAt 6.0+0.01*(ang\50-25),3.0*sin(ang)+5.0,3.0*cos(ang)+5.0,0.0,0.0,0.0,0.0,1.0,0.000076
	glLightfv GL_LIGHT0,GL_POSITION,varptr(light_pos)//この位置に必要

    gosub*cube
	glBegin GL_LINES;ライン
	repeat 32
		glVertex3d -16.0,0.0,-16.0+1.0*cnt//
		glVertex3d 16.0,0.0,-16.0+1.0*cnt//
	loop

	repeat 32
		glVertex3d -16.0+1.0*cnt,0.0,-16.0//
		glVertex3d -16.0+1.0*cnt,0.0,16.0//
	loop
	glEnd

    glPopMatrix
	ang+=0.05
	return


*cube
		glBegin GL_TRIANGLES
		ww=0
			repeat 12
				repeat 3
				glNormal3dv varptr(point(rokkakum.ww*3))
				glVertex3dv varptr(point(rokkakum.ww*3))
				ww++
				loop
			loop
		glEnd
	return

*頂点設定
	dim rokkakum,36
	rokkakum=1,0,2 ,0,3,2 ,2,5,1 ,2,6,5 ,2,3,6 ,3,7,6 ,0,4,3 ,3,4,7 ,1,4,0 ,1,5,4, 4,5,6 ,6,7,4

	ddim point,24
	point=1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0
	repeat 24
		point.cnt/=sqrt(3.0)
	loop
	return

*ライト設定
	fdim light_pos,4
	light_pos=float(20.81),float(5.81),float(19.0),float(0.0)
	glLightfv GL_LIGHT0,GL_POSITION,varptr(light_pos)
	glEnable GL_LIGHTING
	glEnable GL_LIGHT0
    glEnable GL_TEXTURE_2D
	return