//ピッチロールヨーを簡単に扱う
//角度情報はクオータニオンでやっているというサンプル
//「OpenCLとOpenGLの連携」が不可のデバイスでは実行できない
#include "hspcl32.as"
	HCLini 1
		
	gkcev=0
	repeat HCLDevCount
		HCLSetDev cnt
		gkcev+=HCLGetDevGLflg()
		if gkcev:break
	loop
	if (gkcev==0){;デバイスがOpenCLとOpenGLの連携を使えるか、つかえるなら１つかえないなら０
		dialog "このデバイスでは正常に動作しないと思われます。\nそれでも開始しますか？",3
		if stat!6:HCLbye:end
	}


	HGLSetView

	title "ピッチ操作↑↓、ロール操作→←"
    glClearColor 1.0, 1.0, 0.0, 1.0//背景色指定、ｗ成分は1.0
	glEnable GL_TEXTURE_2D;テクスチャ使いますよ
	mes "mqoロード中"
	mes "ピッチ操作↑↓、ロール操作→←"
	HGLmqoload "3ddate\\HL-10_pub22.mqo",mqoid1
   	HGLMqoSetScale mqoid1,0.9,0.9,0.9//0.9倍に拡大


	ddim v3_front,3//初期戦闘機の姿勢。前方向のベクトル(x,y,z)
	ddim v3_top  ,3//初期戦闘機の姿勢。上方向のベクトル(x,y,z)
	ddim v3_left ,3//初期戦闘機の姿勢。左方向のベクトル(x,y,z)
	ddim v3_front_2,3//回転後戦闘機の姿勢。前方向のベクトル(x,y,z)
	ddim v3_top_2  ,3//回転後戦闘機の姿勢。上方向のベクトル(x,y,z)
	ddim v3_left_2 ,3//回転後戦闘機の姿勢。左方向のベクトル(x,y,z)
	v3_front=0.0,0.0,1.0
	v3_top  =0.0,1.0,0.0
	v3_left =1.0,0.0,0.0


	ddim mqopos,3//mqoの位置ほ保持する変数(x,y,z)
	ddim nowmqoquot,4//mqoの現在姿勢を保持するクオータニオン(θ,x,y,z)
	nowmqoquot=0.0,1.0/sqrt(3),1.0/sqrt(3),1.0/sqrt(3)//初期値クオータニオンは単位ベクトルであればどんな値でも良い

	ang=0.02//回転角
	ddim quot,4//回転クオータニオン(θ,x,y,z)


	repeat -1
	
		await 16
		stick key,15
		quot.0=0.0//キーを押してなければ回転角0.0
		if key&1: quot.0= ang,v3_front_2.0,v3_front_2.1,v3_front_2.2//キーを押した時に回転クオータニオンを設定
		if key&4: quot.0=-ang,v3_front_2.0,v3_front_2.1,v3_front_2.2//キーを押した時に回転クオータニオンを設定
		if key&2: quot.0=-ang,v3_left_2 .0,v3_left_2 .1,v3_left_2 .2//キーを押した時に回転クオータニオンを設定
		if key&8: quot.0= ang,v3_left_2 .0,v3_left_2 .1,v3_left_2 .2//キーを押した時に回転クオータニオンを設定
		HGLmulQuaternion nowmqoquot,quot//回転クオータニオンからmqoの現在姿勢保持するクオータニオンを更新。(θ,x,y,z)を(θ,x,y,z)で更新

		//mqoの現在姿勢からfront top leftを更新
		HGLRotate3dbyQuaternion v3_front,v3_front_2,nowmqoquot//nowmqoquotの情報さえあればなんでも分かる。(x,y,z)を(θ,x,y,z)で更新
		HGLRotate3dbyQuaternion v3_top  ,v3_top_2  ,nowmqoquot//nowmqoquotの情報さえあればなんでも分かる。(x,y,z)を(θ,x,y,z)で更新
		HGLRotate3dbyQuaternion v3_left ,v3_left_2 ,nowmqoquot//nowmqoquotの情報さえあればなんでも分かる。(x,y,z)を(θ,x,y,z)で更新

		//ポジション更新
		mqopos.0+=0.4*v3_front_2.0//座標加算
		mqopos.1+=0.4*v3_front_2.1//座標加算
		mqopos.2+=0.4*v3_front_2.2//座標加算
   		HGLMqoSetPos mqoid1,mqopos.0,mqopos.1,mqopos.2
   		HGLMqoSetAng mqoid1,nowmqoquot.0,nowmqoquot.1,nowmqoquot.2,nowmqoquot.3//ここの姿勢もnowmqoquotで




		glClear (GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
		glPushMatrix
		gluLookAt -450,300.0,-40.0,0.0,40.0,0.0,1.0,0.0,0.0
   		// 図形の描画

		HGLMqoDraw mqoid1
		gosub*ライン

		glPopMatrix
		glFinish
		SwapBuffers wglGetCurrentDC()

		flm++:if gettime(6)!mgett:mgett=gettime(6):title "ピッチ操作↑↓、ロール操作→←　　fps="+flm+"":flm=0
		getkey key,27:if key:HCLbye:end
	loop





*ライン
		glBegin GL_LINES;ライン
	    glColor3d 1.0,0.0,0.0;赤色
		repeat 32
			glVertex3d -1600.0,0.0,-1600.0+100.0*cnt//
			glVertex3d 1600.0,0.0,-1600.0+100.0*cnt//
		loop

	    glColor3d 0.0,0.0,1.0;青色
		repeat 32
			glVertex3d -1600.0+100.0*cnt,0.0,-1600.0//
			glVertex3d -1600.0+100.0*cnt,0.0,1600.0//
		loop
		glEnd
	    glColor3d 1.0,1.0,1.0

	return