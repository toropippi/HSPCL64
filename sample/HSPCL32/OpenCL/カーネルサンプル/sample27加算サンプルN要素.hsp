/////////////////////////////////////////////////////////////////////////////////////////////////
;
;グラボ上でC=A+Bをやるプログラム。AとBとCはそれぞれn要素のint型配列変数
;nがわからない場合、つまりグローバルワークサイズがわからない場合、どのようなローカルワークサイズで割り切れるかもわからない。
;そこでHCLDoKernelではなくHCLDoKrn1_subを使うことで解決する
/////////////////////////////////////////////////////////////////////////////////////////////////

#define N	100001//10万


#include "hspcl32.as"
	HCLini 1
	if HCLDevCount=0:dialog "対応ビデオカードがありません。終了します",1:end
	HCLSetDev 0;0番目のデバイスを使って計算する

	sdim progrms,2048;ソースコード
	progrms={"__kernel void addsamp(__global int *A, __global int *B, __global int *C) {
		int ic=get_global_id(0);
		C[ic]=A[ic]+B[ic];
	}
"}

	HCLCreateProgramWithSource progrms,strlen(progrms),prgid;ソースからプログラムid生成
	HCLCreateKernel prgid,"addsamp", krnid

	dim hsp_A,N:repeat N:hsp_A.cnt=rnd(6000):loop
	dim hsp_B,N:repeat N:hsp_B.cnt=rnd(6000):loop
	dim hsp_C,N

	HCLCreateBuffer vram_A,N*4;int型は4byteなのでサイズに4をかける
	HCLCreateBuffer vram_B,N*4;
	HCLCreateBuffer vram_C,N*4;

	HCLWriteBuffer vram_A,hsp_A,N*4;hsp_A → vram_A  に全コピー
	HCLWriteBuffer vram_B,hsp_B,N*4;hsp_B → vram_B  に全コピー

	HCLSetKernel krnid,0 ,vram_A;
	HCLSetKernel krnid,1 ,vram_B;ここに注目！HCLSetKernelの第二引数に1を指定している。これは__kernel void addint(__global int *A,__global int *B,__global int *C) の第ニ(第0から数えれば1番目の)引数「int *B」に「vram_B」をセットしますよということ。
	HCLSetKernel krnid,2 ,vram_C;ここは、カーネルのほうの第三引数にvram_Cを指定したいので、HCLSetKernelの第二引数に「2」を指定。
	//                ↑には、セットしたいカーネルの引数が第n番目だとしたらn-1を指定しなさい、ということ！このサンプルの一番言いたいところ

	HCLDoKrn1_sub krnid,N,64;ローカルワークサイズに64を指定。割り切れなくても良い
	HCLWaitTask//機種によっては必要ないがこれやっぱ必要

	HCLReadBuffer vram_C,hsp_C,N*4;vram_C → hsp_C  にN配列コピー

	repeat limit(N,0,32)//32こだけ表示
		mes ""+hsp_A.cnt+" + "+hsp_B.cnt+" = "+hsp_C.cnt;加算の計算はGPGPU
	loop
	HCLbye//後片付け
	dim hsp_A,1
	dim hsp_B,1
	dim hsp_C,1
	stop