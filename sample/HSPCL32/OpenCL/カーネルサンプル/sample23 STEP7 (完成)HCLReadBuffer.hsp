/////////////////////////////////////////////////////////////////////////////////////////////////
;HCLCallの簡易計算からHCLDoKernelへのステップアップのために作ったサンプルです。
;グラボ上でint型配列(16個)に整数12345を代入するプログラム

;流れとしては

;１グラボ上で動かすコード(カーネル)を、ファイルに出力
;２そのファイルをビルド
;３コード内の関数(カーネル)を登録
;４グラボ上にVRAM確保
;５カーネルの引数にVRAMを渡す
;６カーネル実行(これでVRAMに12345が代入される)
;７VRAMからデータをリード
;８HSP画面に表示
;９後片付け
/////////////////////////////////////////////////////////////////////////////////////////////////




#include "hspcl32.as"
	HCLini 1
	if HCLDevCount=0:dialog "対応ビデオカードがありません。終了します",1:end

	HCLSetDev 0;0番目のデバイスを使って計算する

	sdim progrm,2048;ソースコード
	progrm={"__kernel void dainyu(__global int *vram0) {
	vram0[get_global_id(0)]=12345;
}
	"}

	bsave "clcode.cl",progrm
	wait 20
	HCLBuildProgram "clcode.cl",prgid;↑のコードのプログラムをビルド！
	HCLCreateKernel prgid,"dainyu",krnid;カーネルid作成。↑の"dainyu"関数というのが1カーネル
	HCLCreateBuffer vram,64;vramに64byte確保する。int型でいうと64/4で16配列をグラボ上に確保したことになる。この命令で確保するデータの配列の「型」は指定できない。つまりこの時点で64byte確保できたがdouble型でもint型でもfloat型で使用してもいい。型はカーネル実行時にカーネル側で指定する
	HCLSetKernel krnid,0,vram;↑の__global int *vram0・・・の「vram0」に割り当てるメモリオブジェクトを指定。引数の数だけ命令を呼び出し指定する。今回は引数１こなので１回だけ
	HCLDoKernel krnid,1,16,1;16配列全部に数字(12345)を代入したいために並列実行数には16を指定。
	HCLWaitTask//CPU側がまつ
	dim a,16;HSPスレッド側にもint型16配列作成
	HCLReadBuffer vram,a,64;vram → a  に64byteコピー
	repeat 16
		mes a.cnt;これで12345が表示されればグラボ上でカーネル実行できたことになる
	loop
	mes ";これで12345が表示されればグラボ上でカーネル実行できたことになる"
	HCLbye//後片付け
	wait 3
	delete "clcode.cl"//後片付け
	wait 3
	stop