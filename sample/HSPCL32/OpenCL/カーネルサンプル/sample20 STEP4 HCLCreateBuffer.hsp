/////////////////////////////////////////////////////////////////////////////////////////////////
;HCLCallの簡易計算からHCLDoKernelへのステップアップのために作ったサンプルです。
;グラボ上でint型配列(16個)に整数12345を代入するプログラム

;流れとしては

;１グラボ上で動かすコード(カーネル)を、ファイルに出力
;２そのファイルをビルド
;３コード内の関数(カーネル)を登録
;４グラボ上にVRAM確保

/////////////////////////////////////////////////////////////////////////////////////////////////




#include "hspcl32.as"
	HCLini 1
	if HCLDevCount=0:dialog "対応ビデオカードがありません。終了します",1:end

	HCLSetDev 0;0番目のデバイスを使って計算する

	sdim progrm,2048;ソースコード
	progrm={"__kernel void dainyu(__global int *vram0) {
	vram0[get_global_id(0)]=12345;
}
	"}

	bsave "clcode.cl",progrm
	wait 20
	HCLBuildProgram "clcode.cl",prgid;↑のコードのプログラムをビルド！
	HCLCreateKernel prgid,"dainyu",krnid;カーネルid作成。↑の"dainyu"関数というのが1カーネル
	HCLCreateBuffer vram,64;グラボのメモリに64byte確保する。
	//ここの「vram」はただの配列なし変数。CL_mem_object idという整数ポインタみないなもの
	//vram.7=12345 のように、直接グラボ上のメモリにアクセスすることはできない！(これ重要)
	//ならどのようにアクセスするかというと、カーネルからアクセスしなければいけない。
	//HCLCreateBuffer vram,64 によって、64byteの配列変数をグラボ上に確保したことになる。
	//この命令で確保するデータの配列の「型」は指定できない。dim やddimのように型は指定できない
	//つまりこの時点で64byte確保できたがdouble型でもint型でもfloat型としてでも使用していい。
	//型はカーネル実行時にカーネル側で指定する。
	//今回でいうところの「clcode.cl」で「__global int *vram0」としているのでint型で使うことになる
	//int型で使うとしたらint型を16配列(64byte/4byte)用意したということになる。



	//ここまででは何も起こらない
	
	
	
						mes prgid
						mes krnid
						mes vram//VRAMメモリの中身ではない。あくまでid

						//申し訳程度にプログラムidとカーネルidとvramにどんな数字が入れられたかチェック
						//この数字に特に意味は無い（整数ポインタみたいなもの）
