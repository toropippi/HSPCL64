//先程のサンプルに加え
//CommandQueueが違うとHCLReadBufferやWriteBufferも同時実行され、正しい結果が得られないことがあります。
//一見不便なように思えますが逆に使いこなすことで
//計算と転送のオーバーラップができることになます。これは1つのCommandQueueだけでは絶対にできません。

#include "HSPCL64.as"
#include "ViewTimeStamp_module.as"
	randomize
	HCLinit
	n=1024*1024*3//3Mb、この大きさならfillに少し時間がかかるはず

	source={"
__kernel void fill0(__global char* a)
{
    for(int i=0;i<N;i++)
	    a[i]=52;
}

__kernel void fill1(__global char* a)
{
    for(int i=N-1;i>=0;i--)
	    a[i]=-11;
}
"}


	HCLSetDevice 0

	prg=HCLCreateProgramWithSource(source,"-D N="+n+"")
	krnfill0=HCLCreateKernel(prg,"fill0")
	krnfill1=HCLCreateKernel(prg,"fill1")
	
	clmem=HCLCreateBuffer(n)
	HCLSetKernel krnfill0,0,clmem
	HCLSetKernel krnfill1,0,clmem
	dim data,n/4

	//コマンドキュー0では52のfillを配列の先頭から実行
	HCLSetCommandQueue 0
	HCLDokrn1 krnfill0,1,1,0//event id=0

	//コマンドキュー1では-11のfillを配列の末尾から実行
	HCLSetCommandQueue 1
	HCLDokrn1 krnfill1,1,1,1//event id=1
	HCLFlush

	//コマンドキュー2ではReadbuffer
	HCLSetCommandQueue 2
	HCLReadBuffer clmem,data,n,0,0,0,2//blocking=0 event id=2
	HCLFlush

	wait 10
	
	HCLSetCommandQueue 0
	HCLFinish
	HCLSetCommandQueue 1
	HCLFinish
	HCLSetCommandQueue 2
	HCLFinish
	//実行状況可視化
	ViewEvents3 3
	
	//配列の中身可視化
	screen 2,1024,1024,0
	//HCLdim_i32FromBuffer data,clmem
	mref vrm,66
	memcpy vrm,data,n
	redraw 1
	stop