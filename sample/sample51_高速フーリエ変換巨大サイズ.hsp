/////////////////////////////////////////////////////////////////////////////////////////////////
//倍精度で高速フーリエ変換
//Nサイズが大きい場合
/////////////////////////////////////////////////////////////////////////////////////////////////
#include "HSPCL64.as"
	HCLinit
	randomize
	M=24//冪指数。メモリにおさまる範囲で28あたりがmaxか
	N=1<<M
	
	prgid=HCLCreateProgram("FFT.cl")
	krnfft=HCLCreateKernel(prgid,"FFT")
	krnBitRev=HCLCreateKernel(prgid,"BitRev")
	
	memA=HCLCreateBuffer(N*2*8)//実数と虚数があり、1つの数字は8byte
	memB=HCLCreateBuffer(N*2*8)//Aの計算用ダミー変数

	//初期値
	pattern=1.2345
	offset=0
	size=N*2*8
	HCLFillBuffer8 memA,pattern,offset,size
	HCLFinish
	pos 0,0
	mes "GPU\n実数		虚数"
	pos 0,38
		repeat limit(N,1,9)
		mes ""+HCLReadIndex_i64(memA,cnt*2)+"	"+HCLReadIndex_i64(memA,cnt*2+1)
		loop
	wait 500

	
	HCLSetKrns krnBitRev,memA,M
	HCLSetKrns krnfft,memA,memB,M
	//GPUでFFTの部分/////////////////////////////////////////////////////////
		repeat M
		HCLSetKernel krnfft,3,cnt
		HCLDoKrn1 krnfft,N/2,limit(N/2,1,128)
		loop
	HCLDoKrn1 krnBitRev,N,limit(N,1,128)
	HCLFinish
	//GPUでFFTの部分/////////////////////////////////////////////////////////

	
	pos 0,0
	mes "GPU\n実数		虚数"
	pos 0,38
		repeat limit(N,1,9)
		mes ""+HCLReadIndex_dp(memA,cnt*2)+"	"+HCLReadIndex_dp(memA,cnt*2+1)
		loop

	//gosub*DFT検算
	stop

/*


*DFT検算
	//DFT計算。二重ループ
		repeat N
		t=cnt
			repeat N
			x=cnt
			w=-3.14159265358979323846264338328*2.0*t*x/N

			s=sin(w)
			c=cos(w)

			r=hsp_dataD_r.x
			i=hsp_dataD_i.x

			hsp_retD_r.t+=r*c-i*s
			hsp_retD_i.t+=r*s+i*c
			loop
		loop
	
	pos 0,220
	mes "CPUで検算(DFT)\n実数		虚数"
	pos 0,258
		repeat limit(N,1,9)
		mes ""+hsp_retD_i(cnt)+"	"+hsp_retD_r(cnt)
		loop
	return*/