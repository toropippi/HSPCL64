/////////////////////////////////////////////////////////////////////////////////////////////////
;共有メモリのサンプル
;65536*64個のランダムな数をGPUに仕分けさせる

;1スレッドあたり64個の数を抜き出して、偶数、奇数の数を割り出す
;このスレッドを65536個回すのだが、ローカルアイテムサイズを256にして共有メモリ(ローカルメモリ)を使うことで
;256スレッド同士での数値の共有が可能になる
;つまり65536スレッドを256スレッド同士つなげて65536/256=256要素のint型配列変数に奇数、偶数の数を保存
;この256にまとまった偶数、奇数をVRAMからCPUに転送して256回加算して最終的な合計値を求める

;なお256スレッドが共有されている中でsum(合計値)を求めるのに、アトミック演算を使うこともあるが
;今回は256→128→64→・・・2→1というまとめ方をしている。
/////////////////////////////////////////////////////////////////////////////////////////////////
#include "HSPCL64.as"
	randomize
	HCLinit
	
	mes "65536個のスレッドを実行します。\n各々のスレッドで64個の数値を偶数奇数カウントしていきます。\nこのときカーネル内で256個のスレッドが同期して情報を共有します\n"
	dim rando,65536*64
		repeat 65536*64;419万個のランダム数生成
		rando.cnt=rnd(32767)*rnd(32000)+rnd(32767)
		loop
	mes "65536*64個のランダム数生成"

	mes "ソースコンパイル"
	prgid=HCLCreateProgram("奇数偶数分けその2共有メモリサンプル.cl")
	krnid=HCLCreateKernel(prgid,"wake")
	wait 1

	mes "VRAMメモリ確保"
	vram=HCLCreateBufferFrom(rando)//65536*64のint型配列を作成
	kisu=HCLCreateBuffer(256*4);奇数の数を保存するchar型配列変数を作成
	gusu=HCLCreateBuffer(256*4);偶数の数を保存するchar型配列変数を作成
	HCLSetKernel krnid,0,vram;
	HCLSetKernel krnid,1,0,4*256;奇数用ローカルメモリ作成。１ワークグループにつき1024byte作成
	HCLSetKernel krnid,2,0,4*256;偶数用ローカルメモリ作成。１ワークグループにつき1024byte作成
	HCLSetKernel krnid,3,kisu;
	HCLSetKernel krnid,4,gusu;
	wait 1


	//GPU側で計算開始！
	mes "カーネル実行中"
	//1スレッドあたり64個のint変数を仕分け、またローカルワークサイズが256なのがミソ！！
	HCLDoKrn1 krnid,65536*64/64,256
	HCLFinish
	mes "カーネル実行終了"
	
	//CPU側で集計
	dim k,256
	HCLReadBuffer kisu,k,256*4
	奇数の数=0
		repeat 256
		奇数の数+=k.cnt
		loop
	HCLReadBuffer gusu,k,256*4
	偶数の数=0
		repeat 256
		偶数の数+=k.cnt
		loop

	//表示
	mes "\nGPUでカウントした結果"
	mes "奇数の数		"+奇数の数
	mes "偶数の数		"+偶数の数
	mes "奇数の数＋数の数＝	"+(偶数の数+奇数の数)+"    =4194304なら正確にできた"


	//CPU側で計算開始
	repeat 65536*64;419万個ループ
		if rando.cnt\2:intkisuko++:else:intgusuko++
	loop

	//表示
	mes "\nCPUでカウントした結果"
	mes "奇数の数		"+intkisuko
	mes "偶数の数		"+intgusuko
	mes "奇数の数＋偶数の数＝	"+(intkisuko+intgusuko)+"    =4194304なら正確にできた"
	stop