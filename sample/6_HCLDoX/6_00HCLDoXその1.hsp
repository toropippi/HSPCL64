//カーネルコードを実行する命令は
//HCLCall
//HCLDoKernel
//HCLDokrn1,2,3
//HCLCall2
//とありましたが今回のHCLDoXc,HCLDoXi,HCLDoXl,HCLDoXuc,HCLDoXui,HCLDoXul,HCLDoXf,HCLDoXdは5種類目の命令となります。
//詳細はソース最後のコメントに

#include "HSPCL64.as"
	HCLinit
	
	n=256//配列サイズ 256*4byte
	dim host_a,n
	dim host_b,n
	dim host_c,n
	
		repeat n
		host_a.cnt=rnd(100)
		host_b.cnt=rnd(100)
		loop
	
	clmem_a=HCLCreateBufferFrom(host_a)
	clmem_b=HCLCreateBufferFrom(host_b)
	clmem_c=HCLCreateBufferFrom(host_c)

	HCLDoXi "C[i]=A[i]+B[i]+a;",clmem_a,clmem_b,clmem_c,10

		repeat 30
		aa=HCLReadIndex_i32(clmem_a,cnt)
		bb=HCLReadIndex_i32(clmem_b,cnt)
		cc=HCLReadIndex_i32(clmem_c,cnt)

		mes ""+aa+" + "+bb+" + 10 = "+cc+" (正解"+(aa+bb+10)+")"
		loop
	
	stop

//まずHCLDoXc,HCLDoXi,HCLDoXl,HCLDoXuc,HCLDoXui,HCLDoXul,HCLDoXf,HCLDoXdの8種類の違いですが
//c,i,l,uc,ui,ul,f,dがそれぞれchar,int,long,uchar,uint,ulong,float,doubleに対応しています。
//この型情報は、基本的にglobal変数の型の解釈として使われます。
//
//
//HCLDoX系命令について
//第一引数の文字列はOpenCL カーネルコードになります。
//
//ただ普通と違うのは__global float *Aなどと宣言してないことです。
//文字列のコードをプラグイン内部で解釈し、1文字の大文字はglobal変数、1文字の小文字はprivate変数として自動的に宣言が追加されます。
//
//今回のソースの場合はA,B,Cとaという1文字変数が使われており
//	__global int *A,__global int *B,__global int *C,int a
//という宣言がプラグイン内部によって追加されていることになります。
//
//対応関係としては
// A:clmem_a
// B:clmem_b
// C:clmem_c
// a:10
//となっています。
//
//型については
//global変数の場合、HCLDoXiなのでint型に決定されています。
//private変数の場合、HSP側で入力した引数の型がそのまま採用されます。
//今回は10なのでint型と解釈されカーネルコード側でも「int a」とされています。
//
//並列実行数global_sizeとlocal_sizeですが、local_sizeは64固定、global_sizeは
//グローバル変数Aに対応するBufferのサイズから決定されます。
//今回の場合clmem_aのサイズが256*4=1024byte
//HCLDoXiなのでint型と解釈しておりsizeof(int)=4で割って
//global_size=1024/4=256
//ということになっています。
//
//小文字変数の例外としては「i」「j」「k」「x」「y」「z」があります。
//iは
//	int i = get_global_id(0);
//というように宣言されており今回の「a」のような使い方はできません。
//j,k,x,y,zはprivate変数の宣言には使われず、普通にコード内で
//	float x=1.2;
//と使うことができます。