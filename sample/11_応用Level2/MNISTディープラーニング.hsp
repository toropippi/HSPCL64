#include "hspcl64.as"
#include "NNmodule.hsp"
	randomize
	HCLinit

	alpha=0.19
	trainN=60000
	testN=10000
	allN=trainN+testN
	batchN=256//=1batch
	mlpLayerNum=4
	dim mlpLayerNode,mlpLayerNum
	mlpLayerNode=28*28,128,32,10

	gosub*教師テストデータ作成
	gosub*Make_GPUbuffer
	gosub*WV作成//重み

	//メイン計算
	//まいループでランダムにチョイスして256ミニバッチ学習
	h_ce=float(0.0)
		repeat 1093
		gosub*make_rndchiceXT
		//学習
		trainingflg=1
		FNN mlpLayerNode,matX,matWV,BN,trainingflg
		ce=int64(CE_FFN(matT))
		dCE_FNN mlpLayerNode,matX,matWV,BN,matT,alpha,trainingflg
		//テスト
		trainingflg=0
		FNN mlpLayerNode,testX,matWV,BN,trainingflg
		ce_test=int64(CE_FFN(testT))
		
		//h_cetest=HCLReadIndex_fp(ce_test,0):h_ce=HCLReadIndex_fp(ce,0)
		mes ""+strf("%1.4f",HCLReadIndex_fp(ce,0))+"_"+strf("%1.4f",HCLReadIndex_fp(ce_test,0))+"_"+strf("%1.4f",GetAnsRate(testT))+""
		HCLGarbageCollectionNow
		await 1
		if ginfo_cy>460:pos ginfo_cx+240,0
		if ginfo_cx>640:color 255,255,255:boxf:color 0,0,0:pos 0,0
		loop

	stop

*make_rndchiceXT
	//まず全体から256個の重複なしランダムを作成したいが重複なしは大変なので重複ありで
	dim rn,256
		repeat 256
		rn.cnt=(rnd(8192)*8192+rnd(8192))\trainN
		loop
	//X
		repeat 256
		HCLCopyBuffer matX,trainX,28*28*4,28*28*4*cnt,28*28*4*rn.cnt
		loop
	//T
		repeat 256
		HCLCopyBuffer matT,trainT,10*4,10*4*cnt,10*4*rn.cnt
		loop
	return

*Make_GPUbuffer
	//Batch norm計算クラス＝モジュール変数
		repeat mlpLayerNum-2
		newmod BN,BatchNormalization,mlpLayerNode.(cnt+1),cnt+1
		loop
	return

*WV作成
	// Heの初期値
	dim64 matWV,mlpLayerNum-1
		repeat mlpLayerNum-1
		sz=mlpLayerNode.cnt*mlpLayerNode.(cnt+1)
		fdim he,sz
		rsqrt=1.0/sqrt(0.5*mlpLayerNode.cnt)
			repeat sz
			he.cnt=float(randn(rsqrt))
			loop
		matWV.cnt=HCLCreateBufferFrom(he)
		HCLBLAS_Set2DShape matWV.cnt,mlpLayerNode.cnt,mlpLayerNode.(cnt+1)
		HCLIncRefcntCLBufferId matWV.cnt
		loop
	return


*教師テストデータ作成
	//全画像データロード。X
	buffer 1:picload "mnist.png"
	allX=HCLCreateBuffer(mlpLayerNode.0*allN*4)
	memG=HCLCreateBuffer(mlpLayerNode.0*700*4)
	
	buffer 2,28,28*700
		repeat 100
		gsel 2
		pos 0,0
		gcopy 1,cnt*28,0,28,28*700
		gselToBufferFloat2 2,str(memG)
		HCLCopyBuffer allX,memG,mlpLayerNode.0*700*4,mlpLayerNode.0*700*4*cnt,0
		loop

	buffer 1,4,4
	buffer 2,4,4
	
	gsel 0
	
	//全答えロード。T
	dim allAns,allN/4
	bload "ans.txt",allAns
	allT=HCLCreateBuffer(10*allN*4)
	HCLFillBuffer allT,float(0)
	HCLDoXc "F0[(A[i]-48)+i*10]=1.0;",HCLCreateBufferFrom(allAns),allT

	//教師/////////
	//60000
	//画像
	trainX=HCLCreateBuffer(trainN*mlpLayerNode.0*4)
	HCLCopyBuffer trainX,allX,mlpLayerNode.0*trainN*4,0,0
	//答え
	trainT=HCLCreateBuffer(trainN*mlpLayerNode.(mlpLayerNum-1)*4)
	HCLCopyBuffer trainT,allT,mlpLayerNode.(mlpLayerNum-1)*trainN*4,0,0
		
	//1batchあたりの計算につかう256サイズ
	//画像
	matX=HCLCreateBuffer(batchN*mlpLayerNode.0*4)
	HCLBLAS_Set2DShape matX,batchN,mlpLayerNode.0

	//答え
	matT=HCLCreateBuffer(batchN*mlpLayerNode.(mlpLayerNum-1)*4)
	HCLBLAS_Set2DShape matT,batchN,mlpLayerNode.(mlpLayerNum-1)


	//テスト/////////
	//10000
	//画像
	testX=HCLCreateBuffer(testN*mlpLayerNode.0*4)
	HCLBLAS_Set2DShape testX,testN,mlpLayerNode.0
	HCLCopyBuffer testX,allX,mlpLayerNode.0*testN*4,0,mlpLayerNode.0*trainN*4
	//答え
	testT=HCLCreateBuffer(testN*mlpLayerNode.(mlpLayerNum-1)*4)
	HCLBLAS_Set2DShape testT,testN,mlpLayerNode.(mlpLayerNum-1)
	HCLCopyBuffer testT,allT,mlpLayerNode.(mlpLayerNum-1)*testN*4,0,mlpLayerNode.(mlpLayerNum-1)*trainN*4
	
	//
	HCLIncRefcntCLBufferId matX,matT,trainX,trainT,testX,testT
	return


#module

//正規分布するランダムを返す、ボックスミュラー法
#defcfunc randn double scale
    u1 = 1.0*(rnd(32768)+1)/32768.0
    u2 = 1.0*(rnd(32768)+1)/32768.0
    logU1 = -2.0 * logf(u1)
    sq = sqrt(logU1)
    theta = 3.1415926535898 * 2.0 * u2
    z0 = sq * cos(theta) * scale
    z1 = sq * sin(theta) * scale
return z0

#global



/*

		screen 44,800,1280
		repeat 28*28
		mes HCLReadIndex_fp(matT,cnt)
		if ginfo_cy>1260:pos ginfo_cx+80,0
		loop
		stop



*/