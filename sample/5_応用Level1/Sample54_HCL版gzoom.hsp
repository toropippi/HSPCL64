//HSPのgzoom命令に相当することOpenCLで実行します。
//これをさらに改造すればgmode 4的な透明処理とかも実現できます。
//注意としてはmref命令で画面情報を取得するため、画面横幅が4の倍数でないといけないです。
#include "HSPCL64.as"
	HCLinit

	wx=640
	wy=540

	screen 0,wx,wy
		repeat wx*wy/1000
		pos rnd(wx),rnd(wy)
		mes rnd(32766)
		loop
	screen 1,332,404
	
	HCLgzoom 0,1//0→1に拡大縮小
	gsel 1
	redraw 1
	stop

#module

#defcfunc gcd int a_, int b_
	a = a_
	b = b_
	r = a \ b
		repeat 128
		if r==0:break
		a = b
		b = r
		r = a \ b
		loop
	return b

#deffunc HCLgzoom int gselid0, int gselid1
	gsel gselid0
	wx0=ginfo(12)
	wy0=ginfo(13)
	if wx0\4!=0:dialog "画面の横幅が4の倍数でないと予期しない動作が起こります。",1
	mref host_g0,66//これを拡大縮小コピーしたい。アンチエイジング付きで
	
	gsel gselid1
	wx1=ginfo(12)
	wy1=ginfo(13)
	if wx1\4!=0:dialog "画面の横幅が4の倍数でないと予期しない動作が起こります。",1
	mref host_g1,66
	
	HCLCall {"__kernel void gzoom(__global uchar* g0,__global uchar* g1
	,int wx0,int wy0,int wx1,int wy1,int gcdx,int gcdy)
	{
		uint gid=get_global_id(0);
		uint x=gid%wx1;
		uint y=gid/wx1;

		uint wx0g=wx0/gcdx;
		uint wy0g=wy0/gcdy;
		uint wx1g=wx1/gcdx;
		uint wy1g=wy1/gcdy;
		
		uint srclx=x*wx0g; //g1側の左x座標
		uint srcrx=(x+1)*wx0g; //g1側の右x座標
		uint srcly=y*wy0g; //g1側の上y座標
		uint srcry=(y+1)*wy0g; //g1側の下y座標
		//srclxからsrcrxまで、srclyからsrcryまで色を拾いながら加算していくコード

		uint r_sm=0;
		uint g_sm=0;
		uint b_sm=0;

		uint r_start=(srclx/wx1g+1)*wx1g;
		uint d_start=(srcly/wy1g+1)*wy1g;
		uint l=srclx;
		uint u=srcly;

		for(uint d=d_start;;)
		{
			if (d>=srcry)d=srcry;
			uint ysz=d-u;
			for(uint r=r_start,l=srclx;;)
			{
				if (r>=srcrx)r=srcrx;
				uint xsz=r-l;
				uint idx=(u/wy1g)*wx0 + l/wx1g;
				b_sm+=ysz*xsz*(uint)g0[idx*3+0];
				g_sm+=ysz*xsz*(uint)g0[idx*3+1];
				r_sm+=ysz*xsz*(uint)g0[idx*3+2];
				l=r;
				if (l>=srcrx)break;
				r+=wx1g;
			}
			u=d;
			if (u>=srcry)break;
			d+=wy1g;
		}

		uint rev=wx0g*wy0g;
		g1[(x+y*wx1)*3+0] = (uchar)(b_sm/rev);
		g1[(x+y*wx1)*3+1] = (uchar)(g_sm/rev);
		g1[(x+y*wx1)*3+2] = (uchar)(r_sm/rev);
	}
"},wx1*wy1,0,host_g0,host_g1,wx0,wy0,wx1,wy1,gcd(wx0,wx1),gcd(wy0,wy1)
	return
#global