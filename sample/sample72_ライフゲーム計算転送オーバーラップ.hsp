//GPUの計算はライフゲームの計算とmemvrmの計算
//GPU→CPUでmemvrmから読み込むため、ライフゲームの計算とGPU(memvrm)→CPUがオーバーラップできるはずである
#include "HSPCL64.as"
	HCLinit
#const WX 512
#const WY 512

	//HCLSetDevice 0
	prg=HCLCreateProgram("LifeGame.cl","-D WX="+WX+" -D WY="+WY+"")
	krnGameMain=HCLCreateKernel(prg,"GameMain")
	krnCellView=HCLCreateKernel(prg,"CellView")

	//メモリ初期化、カーネル設定
	memA=HCLCreateBuffer(WX*WY*4)
	memB=HCLCreateBuffer(WX*WY*4)
	memvrm=HCLCreateBuffer(WX*WY*3)
	HCLFillBuffer_i32 memA,0
	HCLFillBuffer_i32 memB,0

	gosub*重量級宇宙船
	gosub*ダイハード
	gosub*どんぐり

	screen 1,640,480
	screen 0,WX,WY
	mref vrm,66


	HCLSetCommandQueue 0
	//ライフゲーム計算
	HCLSetKrns krnGameMain,memA,memB
	HCLDokrn1 krnGameMain,WX*WY,64

	event_id=0
*main
	//画像変換計算
	HCLSetKrns krnCellView,memB,memvrm
	HCLDokrn1 krnCellView,WX*WY,64,event_id
	event_id++

	//GPU→CPU
	HCLSetCommandQueue 1
	HCLSetWaitEvent event_id-1//さっきのmemB→memvrmが終わらないと読み込んでほしくない
	HCLReadBuffer memvrm,vrm,,,,0,event_id
	lastReadBufferEventid=event_id
	event_id++

	HCLSetCommandQueue 0
	//ライフゲーム計算、これをGPU→CPUの転送中に行いたい
	tmp=memA//swap3行
	memA=memB//swap3行
	memB=tmp//swap3行
	HCLSetKrns krnGameMain,memB,memA
	HCLDokrn1 krnGameMain,WX*WY,64,event_id
	event_id++

	repeat -1//転送が終了したらループを抜ける
		await 0
		if HCLGetEventStatus(lastReadBufferEventid)==0:break
	loop
	redraw 1//描画
	
	if ((count\1024>1020)&(event_id>6)){
		count=0
		gsel 1
		color 255,255,255:boxf:color 0,0,0
		ViewEvents4 event_id-1
		gsel 0
	}
	
	gosub*fpsview
	count++
	
	if event_id>=8:event_id=0
	goto*main

*fpsview
	flm++
	if ms!gettime(6):ms=gettime(6):fps=flm:flm=0
	pos 0,0:color 255,55,55:mes "fps="+fps+""
	return

*重量級宇宙船
	//重量級宇宙船をセット
	idx=WX/2*WY+WX/2
	HCLWriteIndex_i32 memA,idx+3,1
	HCLWriteIndex_i32 memA,idx+4,1
	HCLWriteIndex_i32 memA,idx+WX+1,1
	HCLWriteIndex_i32 memA,idx+WX+6,1
	HCLWriteIndex_i32 memA,idx+WX*2,1
	HCLWriteIndex_i32 memA,idx+WX*3,1
	HCLWriteIndex_i32 memA,idx+WX*3+6,1
	HCLWriteIndex_i32 memA,idx+WX*4+0,1
	HCLWriteIndex_i32 memA,idx+WX*4+1,1
	HCLWriteIndex_i32 memA,idx+WX*4+2,1
	HCLWriteIndex_i32 memA,idx+WX*4+3,1
	HCLWriteIndex_i32 memA,idx+WX*4+4,1
	HCLWriteIndex_i32 memA,idx+WX*4+5,1
	return
	
*どんぐり
	//どんぐりをセット
	idx=WX/7*WY+WX*2/3
	HCLWriteIndex_i32 memA,idx+1,1
	HCLWriteIndex_i32 memA,idx+WX+3,1
	HCLWriteIndex_i32 memA,idx+WX*2,1
	HCLWriteIndex_i32 memA,idx+WX*2+1,1
	HCLWriteIndex_i32 memA,idx+WX*2+4,1
	HCLWriteIndex_i32 memA,idx+WX*2+5,1
	HCLWriteIndex_i32 memA,idx+WX*2+6,1
	return

*ダイハード
	idx=WX/2*WY+WX+WX/2-30
	HCLWriteIndex_i32 memA,idx+6,1
	HCLWriteIndex_i32 memA,idx+WX,1
	HCLWriteIndex_i32 memA,idx+WX+1,1
	HCLWriteIndex_i32 memA,idx+WX*2+1,1
	HCLWriteIndex_i32 memA,idx+WX*2+5,1
	HCLWriteIndex_i32 memA,idx+WX*2+6,1
	HCLWriteIndex_i32 memA,idx+WX*2+7,1
	return











#module

#deffunc ViewEvents4 int event_num
	if event_num<=0:return
	//まずはすべての計算時間を取得
	dim_i64 kinfo,event_num
	sdim kinfos,128,event_num
	dim_i64 start_time,event_num
	dim_i64 end_time,event_num
	dim cmdq_no,event_num
	offset=int64("9223372036854775807")
		repeat event_num
		start_time.cnt=HCLGetEventLogs(cnt,6)//6はCL_PROFILING_COMMAND_STARTのtime
		end_time.cnt=HCLGetEventLogs(cnt,7)//7はCL_PROFILING_COMMAND_ENDのtime
		cmdq_no.cnt=HCLGetEventLogs(cnt,3)//3は何番のcommand queで実行されたか取得
		kinfo.cnt=HCLGetEventLogs(cnt,0)//0はeventがなんのコマンドだったか取得
		if kinfo.cnt==CL_COMMAND_WRITE_BUFFER  :kinfos.cnt="WRITE_BUFFER"
		if kinfo.cnt==CL_COMMAND_READ_BUFFER   :kinfos.cnt="READ_BUFFER"
		if kinfo.cnt==CL_COMMAND_NDRANGE_KERNEL:kinfos.cnt=HCLGetKernelName(HCLGetEventLogs(cnt,1))
		offset=MIN64(offset,start_time.cnt)
		loop

	scalex=int64("-9223372036854775808")
		repeat event_num
		start_time.cnt-=offset
		end_time.cnt-=offset
		scalex=MAX64(scalex,end_time.cnt)
		loop

	//計算時間をグラフで表示
	//軸
	line 30,30,30,450
	line 30,30,27,35
	line 30,30,33,35
	pos 0,240
	font msgothic,12
	mes "Queue\n番号"

	line 30,450,620,450
	line 620,450,615,447
	line 620,450,615,453
	pos 270,460
	mes "時間(μs)"
		repeat 9
		line 30+cnt*580/8,450,30+cnt*580/8,445
		pos 30+cnt*580/8,450
		mes scalex*cnt/8000
		loop

	//実行単位で表示していく
		repeat event_num
			hsvcolor rnd(192),200,200
			//まず実行時間を表示
			lx=start_time.cnt*580/scalex+30
			rx=end_time.cnt*580/scalex+30
			yy=270-int(cmdq_no.cnt)*50
			boxf int(lx),yy,int(rx),yy+30
			
			//文字表示
			color 0,0,0
			pos int(lx),yy-10
			mes kinfos.cnt
		loop
	return


#global