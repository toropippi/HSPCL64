/////////////////////////////////////////////////////////////////////////////////////////////////
//倍精度で高速フーリエ変換
//Nサイズが大きい場合
//先程のサンプルではM回ループと最後のビット逆順を1つのカーネル内で実行していた。
//今回はそれぞれのSTEPを抽出して実行している。
/////////////////////////////////////////////////////////////////////////////////////////////////
#include "HSPCL64.as"
	HCLinit
	M=9//冪指数
	N=1<<M
	
	prgid=HCLCreateProgram("FFT.cl")
	krnfft=HCLCreateKernel(prgid,"FFT")
	krnBitRev=HCLCreateKernel(prgid,"BitRev")

	
	ddim wave,N*2//実数、虚数、実数、虚数・・・の順に格納
	gosub*波形初期設定
	memA=HCLCreateBufferFrom(wave)
	//初期設定終わり

	HCLSetKrns krnfft,memA,M
	HCLSetKrns krnBitRev,memA,M
	//GPUでFFTの部分/////////////////////////////////////////////////////////
		repeat M
		HCLSetKernel krnfft,2,cnt
		HCLDoKrn1 krnfft,N/2,limit(N/2,1,128)
		loop
	HCLDoKrn1 krnBitRev,N,limit(N,1,128)
	HCLFinish
	//GPUでFFTの部分/////////////////////////////////////////////////////////
	
	gosub*view
	stop


*波形初期設定
	rad0=0.14322143:scale0=1.0
	rad1=0.58632415:scale1=1.8
	rad2=2.10432897:scale2=0.6
		repeat N
		wave.(cnt*2)=scale0*sin(rad0*cnt)+scale1*cos(rad1*cnt)+scale2*sin(rad2*cnt)
		loop
	return

*view
	screen 0,N,200
	scalev=25.0
	pos 0,0
		repeat N
		line cnt,100+int(scalev*wave.(cnt*2))
		loop
	
	
	screen 1,N,200
	scalev=0.4
	ddim spectru,N*2//実数、虚数、実数、虚数・・・の順に格納

	HCLReadBuffer memA,spectru
	pos 0,0
		repeat N
		val_r=spectru.(cnt*2)
		val_i=spectru.(cnt*2+1)
		val=scalev*sqrt(val_r*val_r+val_i*val_i)
		line cnt,190-int(val)
		loop
	return