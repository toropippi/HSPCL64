//コード自体は最適化してなく、生存ture 、死滅falseをint型で保持しているので効率は悪い
//ただ可読性という点では良いし
//HSPと比較し十分速いはず
#include "HSPCL64.as"
	HCLinit
#const WX 512
#const WY 512

	prg=HCLCreateProgram("LifeGame.cl","-D WX="+WX+" -D WY="+WY+"")
	krnGameMain=HCLCreateKernel(prg,"GameMain")
	krnCellView=HCLCreateKernel(prg,"CellView")

	//メモリ初期化、カーネル設定
	memA=HCLCreateBuffer(WX*WY*4)
	memB=HCLCreateBuffer(WX*WY*4)
	memvrm=HCLCreateBuffer(WX*WY*3)
	HCLFillBuffer_i32 memA,0
	HCLFillBuffer_i32 memB,0

	gosub*重量級宇宙船
	gosub*ダイハード
	gosub*どんぐり
	
	screen 0,WX,WY
	mref vrm,66

*main
	HCLSetKrns krnGameMain,memA,memB
	HCLDokrn1 krnGameMain,WX*WY,64
	HCLSetKrns krnCellView,memB,memvrm
	HCLDokrn1 krnCellView,WX*WY,64
	
	HCLReadBuffer memvrm,vrm
	redraw 1
	await 16
	
	tmp=memA//swap3行
	memA=memB//swap3行
	memB=tmp//swap3行
	goto*main


*重量級宇宙船
	//重量級宇宙船をセット
	idx=WX/2*WY+WX/2
	HCLWriteIndex_i32 memA,idx+3,1
	HCLWriteIndex_i32 memA,idx+4,1
	HCLWriteIndex_i32 memA,idx+WX+1,1
	HCLWriteIndex_i32 memA,idx+WX+6,1
	HCLWriteIndex_i32 memA,idx+WX*2,1
	HCLWriteIndex_i32 memA,idx+WX*3,1
	HCLWriteIndex_i32 memA,idx+WX*3+6,1
	HCLWriteIndex_i32 memA,idx+WX*4+0,1
	HCLWriteIndex_i32 memA,idx+WX*4+1,1
	HCLWriteIndex_i32 memA,idx+WX*4+2,1
	HCLWriteIndex_i32 memA,idx+WX*4+3,1
	HCLWriteIndex_i32 memA,idx+WX*4+4,1
	HCLWriteIndex_i32 memA,idx+WX*4+5,1
	return
	
*どんぐり
	//どんぐりをセット
	idx=WX/7*WY+WX*2/3
	HCLWriteIndex_i32 memA,idx+1,1
	HCLWriteIndex_i32 memA,idx+WX+3,1
	HCLWriteIndex_i32 memA,idx+WX*2,1
	HCLWriteIndex_i32 memA,idx+WX*2+1,1
	HCLWriteIndex_i32 memA,idx+WX*2+4,1
	HCLWriteIndex_i32 memA,idx+WX*2+5,1
	HCLWriteIndex_i32 memA,idx+WX*2+6,1
	return

*ダイハード
	idx=WX/2*WY+WX+WX/2-30
	HCLWriteIndex_i32 memA,idx+6,1
	HCLWriteIndex_i32 memA,idx+WX,1
	HCLWriteIndex_i32 memA,idx+WX+1,1
	HCLWriteIndex_i32 memA,idx+WX*2+1,1
	HCLWriteIndex_i32 memA,idx+WX*2+5,1
	HCLWriteIndex_i32 memA,idx+WX*2+6,1
	HCLWriteIndex_i32 memA,idx+WX*2+7,1
	return