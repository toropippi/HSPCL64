//バイトニックソートは並列にソートが可能なアルゴリズムです。
//詳しくは
//http://blog.livedoor.jp/toropippi/archives/54817221.html
//

#include "HSPCL64.as"
#include "ViewTimeStamp_module.as"
	HCLinit
	M=23//冪指数
	N=1<<M//ソートしたい要素数

	memA=HCLCreateBuffer(N*(4+4))//sizeof(key)+sizeof(index)
	memB=HCLCreateBuffer(N*(4+4))//sizeof(key)+sizeof(index)
	
	prgid=HCLCreateProgram("BitonicSort.cl")
	krnSort_B2=HCLCreateKernel(prgid,"ParallelBitonic_B2")
	krnSort_B4=HCLCreateKernel(prgid,"ParallelBitonic_B4")
	krnSort_B8=HCLCreateKernel(prgid,"ParallelBitonic_B8")
	krnSort_B16=HCLCreateKernel(prgid,"ParallelBitonic_B16")
	krnSort_C2=HCLCreateKernel(prgid,"ParallelBitonic_C2")
	krnSort_C4=HCLCreateKernel(prgid,"ParallelBitonic_C4")
	krnRnd=HCLCreateKernel(prgid,"GenerateRandom")

	//まずは初期値をGPUで生成
	HCLSetKernel krnRnd,0,memA
	HCLDoKrn1 krnRnd,N,limit(N,1,256)
	HCLCopyBuffer memB,memA//A→B

	//ソート計算
	//引数をセット
	HCLSetKernel krnSort_B2,0,memA
	HCLSetKernel krnSort_B4,0,memA
	HCLSetKernel krnSort_B8,0,memA
	HCLSetKernel krnSort_B16,0,memA
	HCLSetKernel krnSort_C2,0,memA
	HCLSetKernel krnSort_C4,0,memA

	//ソート計算1、通常のコード
	event_num=0
	gosub*B2only
	HCLFinish
	screen 0,640,480
	ViewEvents1 event_num

	//後片付け
	event_num=0
	HCLCopyBuffer memA,memB//B→A
	HCLFinish
	//ソート計算2、最速のコード
	gosub*fastest
	HCLFinish
	screen 1,640,480
	ViewEvents1 event_num

	stop



*B2only
	//ソート計算
		repeat M
		i=cnt
		inc=1<<cnt
			repeat cnt+1
			HCLSetKrns krnSort_B2,memA,inc,2 << i
			HCLDoKrn1 krnSort_B2,N/2,64,event_num
			event_num++
            inc /= 2
			loop
		loop
	return

*fastest
	//int B_indx, inc;
	//int kernel_id;
		repeat M
		i = cnt
		inc = 1 << i;
		    repeat i+1
		    j = cnt
	        if inc <= 128:break//あとはshared memory内におさまるので
	
	        if (inc >= 2048){
	            B_indx = 16
	            kernel_id = krnSort_B16
	        }else:if (inc >= 1024){
	            B_indx = 8
	            kernel_id = krnSort_B8
	        }else:if (inc >= 512){
	            B_indx = 4
	            kernel_id = krnSort_B4
	        }else{
	            B_indx = 2
	            kernel_id = krnSort_B2
	        }
	
			HCLSetKernel kernel_id,1,inc * 2 / B_indx
			HCLSetKernel kernel_id,2,2 << i
			HCLDokrn1 kernel_id,n / B_indx,64,event_num
			event_num++
	        inc /= B_indx
		    loop
		
	    //これ以降はshared memoryに収まりそうなサイズなので
	    if ((inc == 8) | (inc == 32) | (inc == 128)){
		    HCLSetkernel krnSort_C4,1,inc
		    HCLSetkernel krnSort_C4,2,2 << i
			HCLDokrn1 krnSort_C4,n / 4,64,event_num
			event_num++
	    }else{
		    HCLSetkernel krnSort_C2,1,inc
		    HCLSetkernel krnSort_C2,2,2 << i
			HCLDokrn1 krnSort_C2,n / 2,128,event_num
			event_num++
	    }
		loop
	return