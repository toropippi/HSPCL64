#include "HSPCL64.as"
	HCLinit
	n=1024*1024*3//3Mb、この大きさならfillに少し時間がかかるはず

	source={"
__kernel void fill0(__global char* a)
{
    for(int i=0;i<N;i++)
	    a[i]=52;
}

__kernel void fill1(__global char* a)
{
    for(int i=N-1;i>=0;i--)
	    a[i]=-11;
}
"}


	HCLSetDevice 0

	prg=HCLCreateProgramWithSource(source,"-D N="+n+"")
	krnfill0=HCLCreateKernel(prg,"fill0")
	krnfill1=HCLCreateKernel(prg,"fill1")
	
	clmem=HCLCreateBuffer(n)
	HCLSetKernel krnfill0,0,clmem
	HCLSetKernel krnfill1,0,clmem

	//コマンドキュー0では52のfillを配列の先頭から実行
	HCLSetCommandQueue 0
	HCLDokrn1 krnfill0,1,1,0//event id=0
	HCLFlush

	//コマンドキュー1では-11のfillを配列の末尾から実行
	HCLSetCommandQueue 1
	HCLDokrn1 krnfill1,1,1,1//event id=1
	HCLFlush

	wait 10
	
	HCLSetCommandQueue 0
	HCLFinish
	HCLSetCommandQueue 1
	HCLFinish
	//実行状況可視化
	event_num=2
	gosub*view1
	gosub*view2
	
	//配列の中身可視化
	screen 2,1024,1024,0
	HCLdim_i32FromBuffer data,clmem
	mref vrm,66
	memcpy vrm,data,n
	redraw 1
	stop
	

*view1
	//まずはすべての計算時間を取得
	dim_i64 kinfo,event_num
	sdim kinfos,128,event_num
	dim_i64 qued_time,event_num
	dim_i64 subd_time,event_num
	dim_i64 start_time,event_num
	dim_i64 end_time,event_num
		repeat event_num
		qued_time.cnt=HCLGetEventLogs(cnt,4)//4はCL_PROFILING_COMMAND_QUEUEDのtime
		subd_time.cnt=HCLGetEventLogs(cnt,5)//5はCL_PROFILING_COMMAND_SUBMITのtime
		start_time.cnt=HCLGetEventLogs(cnt,6)//6はCL_PROFILING_COMMAND_STARTのtime
		end_time.cnt=HCLGetEventLogs(cnt,7)//7はCL_PROFILING_COMMAND_ENDのtime
		
		kinfo.cnt=HCLGetEventLogs(cnt,0)//はeventがなんのコマンドだったか取得
		if kinfo.cnt==CL_COMMAND_WRITE_BUFFER  :kinfos.cnt="WRITE_BUFFER"
		if kinfo.cnt==CL_COMMAND_READ_BUFFER   :kinfos.cnt="READ_BUFFER"
		if kinfo.cnt==CL_COMMAND_NDRANGE_KERNEL:kinfos.cnt="KERNEL"
		loop
		
	offset=qued_time.0
	
		repeat event_num
		start_time.cnt-=offset
		end_time.cnt-=offset
		qued_time.cnt-=offset
		subd_time.cnt-=offset
		loop

	scalex=end_time.(event_num-1)
	

	//計算時間をグラフで表示
	//軸
	line 30,30,30,450
	pos 3,240

	line 30,450,620,450
	line 620,450,615,447
	line 620,450,615,453
	pos 270,460
	font msgothic,12
	mes "時間(μs)"
		repeat 9
		line 30+cnt*580/8,450,30+cnt*580/8,445
		pos 30+cnt*580/8,450
		mes scalex*cnt/8000
		loop
		
	return


*view2
	//実行単位で表示していく
		repeat event_num
			hsvcolor rnd(192),200,200
			//まず実行時間を表示
			lx=start_time.cnt*580/scalex+30
			rx=end_time.cnt*580/scalex+30
			boxf int(lx),100+cnt*50,int(rx),130+cnt*50
			
			//文字表示
			color 0,0,0
			pos int(lx),90+cnt*50
			mes kinfos.cnt
			
			//キューに入れられた時間やsubmitされた時間表示
			color 100,200,0
			lx=qued_time.cnt*580/scalex+30
			line int(lx),100+cnt*50,int(lx),130+cnt*50
			color 100,100,0
			lx=subd_time.cnt*580/scalex+30
			line int(lx),100+cnt*50,int(lx),130+cnt*50
			
		loop
	return