//N*N要素の行列AとBをかけてCを求める計算
//row major
#include "HSPCL64.as"
	HCLinit
	randomize

	N=1024//Nは128の倍数でないといけない
	A=HCLCreateBuffer(N*N*4)
	B=HCLCreateBuffer(N*N*4)
	C=HCLCreateBuffer(N*N*4)
	
	prgid=HCLCreateProgram("SGEMM.cl")
	krnSGEMM=HCLCreateKernel(prgid,"oreoreSGEMM_k")
	krnRnd=HCLCreateKernel(prgid,"GenerateRandom")

	//まずは初期値をGPUで生成
	seed=rnd(9999)
	HCLSetKrns krnRnd,A,seed
	HCLDoKrn1 krnRnd,N*N,limit(N*N,1,256)
	seed=rnd(9999)
	HCLSetKrns krnRnd,B,seed
	HCLDoKrn1 krnRnd,N*N,limit(N*N,1,256)
	HCLFinish
	
	//行列行列積
	mes "計算開始"
	HCLSetKrns krnSGEMM,N,N,N,A,B,C
	g_sz=N/8,N/8
	l_sz=16,16
	HCLDoKernel krnSGEMM,2,g_sz,l_sz
	HCLFinish
	mes "計算終了"

	gosub*検算
	stop


*検算
	x=rnd(N)
	y=rnd(N)
	cpuans=0.0
		repeat N
		a_=FloatToDouble(HCLReadIndex_i32(A,cnt+y*N))
		b_=FloatToDouble(HCLReadIndex_i32(B,cnt*N+x))
		cpuans+=a_*b_
		loop

	gpuans=FloatToDouble(HCLReadIndex_i32(C,y*N+x))

	mes "x="+x+" y="+y+"の結果"
	mes "CPU "+cpuans
	mes "GPU "+gpuans
	return