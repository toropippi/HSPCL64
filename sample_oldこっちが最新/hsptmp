//さきほどのサンプルでは、計算時間はほぼlocal_sizeの反比例でした。
//次は演算律速で計算時間がどうなるかやってみましょう。
#include "HSPCL64.as"
	HCLinit
	prg=HCLCreateProgram("SinDiv.cl")
	krn=HCLCreateKernel(prg,"SinDiv")
	
	n=1024*1024
	clmem_A=HCLCreateBuffer(n*4)
	clmem_B=HCLCreateBuffer(n*4)
	clmem_C=HCLCreateBuffer(n*4)
	
	dim host_A,n
	dim host_B,n
	dim host_C,n
		repeat n
		host_A.cnt=cnt
		host_B.cnt=cnt
		loop
	
	HCLWriteBuffer clmem_A,host_A,n*4,0,0//CPU→GPU
	HCLWriteBuffer clmem_B,host_B,n*4,0,0//CPU→GPU
	
	HCLSetKernel krn,0,clmem_A
	HCLSetKernel krn,1,clmem_B
	HCLSetKernel krn,2,clmem_C
	HCLSetKernel krn,3,1234

		repeat 128-31,31
		local_size=cnt+1
		HCLDoKrn1 krn,n/local_size*local_size,local_size,cnt//同じ計算を、local_sizeだけ変えてなんどもやる
		wait 1
		HCLFinish
		loop
	HCLReadBuffer clmem_C,host_C,n*4,0,0//GPU→CPU

	//計算時間をグラフで表示

	dim c_time,128
	c_time_max=0
		repeat 128-31,31
		start_time=HCLGetEventLogs(cnt,6)
		end_time=HCLGetEventLogs(cnt,7)
		c_time.cnt=int(end_time-start_time)
		if c_time_max<c_time.cnt:c_time_max=c_time.cnt
		loop


	c_time_max/=400
		repeat 128-31,31
		if cnt==0{
			pos 0,480-c_time.cnt/c_time_max
		}else{
			xx=cnt*639/128
			yy=480-c_time.cnt/c_time_max
			line xx,yy
			pset xx-1,yy
			pset xx,yy-1
			pset xx-1,yy-1
			pset xx+1,yy
			pset xx,yy+1
			pset xx+1,yy+1
			pos xx,yy
		}
		loop
		

	stop
	//64 219
	//65 315