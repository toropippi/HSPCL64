//やってることはSample05_VecAdd.hspと同じ
//並列数が同じでも、local_sizeを変えると計算時間が変わってくることがわかります。
//適切なlocal_sizeを指定できるようにしましょう。
//基本的には64,128,256を指定すれば間違いないですが、前提としてglobal_size(並列数)がそれで割り切れないといけません。
//なおlocal_sizeの最大はHCLGetDeviceInfo_i64(CL_DEVICE_MAX_WORK_ITEM_SIZES,0)で取得できますが、一般的に1024が上限です。
#include "HSPCL64.as"
	HCLinit
	prg=HCLCreateProgram("VecAdd.cl")
	krn=HCLCreateKernel(prg,"vecAdd")
	
	n=1024*1024
	clmem_A=HCLCreateBuffer(n*4)
	clmem_B=HCLCreateBuffer(n*4)
	clmem_C=HCLCreateBuffer(n*4)
	
	dim host_A,n
	dim host_B,n
	dim host_C,n
		repeat n
		host_A.cnt=cnt
		host_B.cnt=cnt
		loop
	
	HCLWriteBuffer clmem_A,host_A,n*4,0,0//CPU→GPU
	HCLWriteBuffer clmem_B,host_B,n*4,0,0//CPU→GPU
	
	HCLSetKernel krn,0,clmem_A
	HCLSetKernel krn,1,clmem_B
	HCLSetKernel krn,2,clmem_C

	local_size=1,2,4,8,16,32,64,128,256,512,1024,0//0だけは、「自動で決定される」というおまじないの数字
		repeat 12
		HCLDoKrn1 krn,n,local_size.cnt,cnt//同じ計算を、local_sizeだけ変えてなんどもやる
		HCLFinish
		wait 1
		loop
	HCLReadBuffer clmem_C,host_C,n*4,0,0//GPU→CPU

	//計算時間表示
		repeat 12
		start_time=HCLGetEventLogs(cnt,6)
		end_time=HCLGetEventLogs(cnt,7)
		c_time=end_time-start_time
		mes "local_size = "+local_size.cnt+" のときの計算時間        "+c_time
		loop

	stop