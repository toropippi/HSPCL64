// global_sizeがlocal_sizeで割れないのでエラーになりました。
// local_sizeの概念もよくわからい・・・ということであれば0を指定してあげればよきに計らってくれます。
// ただglobal_sizeが素数とかだとlocal_sizeが1にされて非常に非効率な計算をされてしまうこともあるので、最終手段として使いましょう。
#include "HSPCL64.as"
	HCLinit
	prg=HCLCreateProgram("VecAdd.cl")//OpenCLのコードが書かれたファイル。コンパイルもここで
	krn=HCLCreateKernel(prg,"vecAdd")//"VecAdd.cl"にかかれた関数をもってくる
	
	n=10000//配列サイズ
	clmem_A=HCLCreateBuffer(n*4)//指定はbyte数で
	clmem_B=HCLCreateBuffer(n*4)//4はint型のサイズ
	clmem_C=HCLCreateBuffer(n*4)
	
	dim host_A,n
	dim host_B,n
	dim host_C,n
		repeat n
		host_A.cnt=cnt//HSPで初期値を代入
		host_B.cnt=cnt
		loop
	
	HCLWriteBuffer clmem_A,host_A,n*4,0,0//CPU→GPU
	HCLWriteBuffer clmem_B,host_B,n*4,0,0//CPU→GPU
	
	HCLSetKernel krn,0,clmem_A//OpenCLコードの"vecAdd"に引数を適応
	HCLSetKernel krn,1,clmem_B//OpenCLコードの"vecAdd"に引数を適応
	HCLSetKernel krn,2,clmem_C//OpenCLコードの"vecAdd"に引数を適応
	
	mes "計算start"
	HCLDoKrn1 krn,n,0//local_sizeに0を指定すると自動で決定される。
	HCLReadBuffer clmem_C,host_C,n*4,0,0//GPU→CPU
	mes "計算end"
	
		repeat 27
		mes ""+host_A.cnt+" + "+host_B.cnt+" = "+host_C.cnt
		loop
	pos 300,0
		repeat 27,n-27//ちゃんと最後まで計算で埋まっていることが確認できます。
		mes ""+host_A.cnt+" + "+host_B.cnt+" = "+host_C.cnt
		loop
	stop